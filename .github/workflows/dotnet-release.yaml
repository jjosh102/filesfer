
name: C# Console App Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  build_csharp:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            runtime: linux-x64
            archive_extension: .tar.gz
            artifact_name: csharp-linux-release
          - os: windows-latest
            runtime: win-x64
            archive_extension: .zip
            artifact_name: csharp-windows-release

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore Dependencies
        run: dotnet restore src/Filesfer.Cli

      - name: Publish Self-Contained Executable
        run: dotnet publish src/Filesfer.Cli -c Release -r ${{ matrix.runtime }} --self-contained true

      - name: Archive Linux Output
        if: runner.os == 'Linux'
        run: |
          TAG_NAME=${{ github.ref_name }}
          ARCHIVE_NAME="filesfer-cli-${TAG_NAME}-${{ matrix.runtime }}${{ matrix.archive_extension }}"
          cd "src/Filesfer.Cli/bin/Release/net9.0/${{ matrix.runtime }}/publish"
          tar -czf "../../../../$ARCHIVE_NAME" .
      
      - name: Archive Windows Output
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $TAG_NAME = "${{ github.ref_name }}"
          $ARCHIVE_NAME = "filesfer-cli-$TAG_NAME-${{ matrix.runtime }}${{ matrix.archive_extension }}"
          # Use 7z to create the zip file.
          # The -r flag is for recursive, and -tzip specifies zip format.
          7z a "$ARCHIVE_NAME" "src/Filesfer.Cli/bin/Release/net9.0/${{ matrix.runtime }}/publish/*"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: filesfer-cli-*.tar.gz filesfer-cli-*.zip


  create_csharp_release:
    runs-on: ubuntu-latest
    needs: build_csharp
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          draft: true
          prerelease: false
          files: release-artifacts/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLISH_TOKEN }}

